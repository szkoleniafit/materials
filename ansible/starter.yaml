---
- name: Prerequisites installation
  hosts: localhost
  connection: local
  become: yes

  vars:
    toolsDirectory: '/opt/tools'
    srcDirectory: '{{ toolsDirectory }}/extras'

    helmRepo: 'https://get.helm.sh'
    helmBin: "/usr/local/bin/helm"
    kubectlBin: "/usr/local/bin/kubectl"
    yqBin: "/usr/local/bin/yq"
    helmVersion: "3.11.0"
    kubectlVersion: "1.26.1"
    terraformVersion: "1.3.7"
    terraformBinDir: "/usr/local/bin/"
    terraformBin: "{{ terraformBinDir }}/terraform"
    rhlRepos:
      # For RedHat based
    - name: "Azure Cli"
      descr: "Microsoft Azure Client"
      url: "https://packages.microsoft.com/yumrepos/azure-cli"
      key: "https://packages.microsoft.com/keys/microsoft.asc"

    debianPackages:
      - python3-pip
      - jq

    rpmPackages:
      - azure-cli
      - jq

  tasks:
  - name: Make tools directory
    ansible.builtin.file:
      path: "{{ srcDirectory }}"
      state: directory

  - name: Check if Helm binary exists
    stat:
      path: "{{ helmBin }}"
    register: helm_exist

  - name: Check if Kubectl binary exists
    stat:
      path: "{{ kubectlBin }}"
    register: kubectl_exist

  - name: Check if Terraform binary exists
    stat:
      path: "{{ terraformBin }}"
    register: terraform_exist

  - name: Check if yq binary exists
    stat:
      path: "{{ yqBin }}"
    register: yq_exist

  - name: Check Helm version.
    command: "{{ helmBin }} version"
    failed_when: false
    changed_when: false
    register: helm_version
    when: >
      helm_exist.stat.exists

  - name: Check kubectl version.
    command: "{{ kubectlBin }} version"
    failed_when: false
    changed_when: false
    register: kubectl_version
    when: >
      kubectl_exist.stat.exists

  - name: Check terraform version.
    command: "{{ terraformBin }} version"
    failed_when: false
    changed_when: false
    register: terraform_version
    when: >
      terraform_exist.stat.exists

  - name: Check az-cli version (Debian).
    command: "az version"
    failed_when: false
    changed_when: false
    register: az_version
    when: >
      ansible_os_family == "Debian"

  - name: Download helm
    ansible.builtin.get_url:
      url: "{{ helmRepo }}/helm-v{{ helmVersion }}-linux-amd64.tar.gz"
      dest: "{{ srcDirectory }}/helm-v{{ helmVersion }}.tar.gz"
      mode: '0440'
    when: >
      not helm_exist.stat.exists
      or helmVersion not in helm_version.stdout | default("")

  - name: Download az cli installer (Debian)
    ansible.builtin.get_url:
      url: "https://aka.ms/InstallAzureCLIDeb"
      dest: "{{ srcDirectory }}/InstallAzureCLIDeb.sh"
      mode: '0755'
    register: azcli_src
    when: >
      ansible_os_family == "Debian"
      and az_version.rc == 2 | default(2)

  - name: Download kubectl
    ansible.builtin.get_url:
      url: "https://dl.k8s.io/release/v{{ kubectlVersion }}/bin/linux/amd64/kubectl"
      dest: "{{ kubectlBin }}"
      mode: '0755'
    when: >
      not kubectl_exist.stat.exists
      or helmVersion not in helm_version.stdout | default("")

  - name: Download Terraform
    unarchive:
      src: "https://releases.hashicorp.com/terraform/{{ terraformVersion }}/terraform_{{ terraformVersion }}_linux_amd64.zip"
      dest: "{{ terraformBinDir }}"
      remote_src: yes
    when: >
      not terraform_exist.stat.exists
      or terraformVersion not in terraform_version.stdout | default("")

  - name: Unarchive helm
    unarchive:
      src: "{{ srcDirectory }}/helm-v{{ helmVersion }}.tar.gz"
      dest: "{{ srcDirectory }}"
      remote_src: true
      mode: 0755
    register: helm_src
    when: >
      helmVersion not in helm_version.stdout | default("")

  - name: Copy helm to PATH bin
    copy:
      src: "{{ srcDirectory }}/linux-amd64/helm"
      dest: "{{ helmBin }}"
      mode: 0755
      remote_src: true
    when: >
      helm_src is changed
      and helmVersion not in helm_version.stdout | default("")

  - name: Create the YUM repository (RedHat)
    yum_repository:
      name: "{{ item.name }}"
      description: "{{ item.descr }}"
      baseurl: "{{ item.url }}"
      gpgkey: "{{ item.key }}"
      gpgcheck: yes
      enabled: yes
    loop: "{{ rhlRepos }}"
    when: >
      ansible_os_family == "RedHat"

  - name: Install packages (RedHat)
    ansible.builtin.dnf:
      name:
        "{{ rpmPackages }}"
      state: present
    when: >
      ansible_os_family == "RedHat"

  - name: Install YQ
    ansible.builtin.get_url:
      url: "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
      dest: "{{ yqBin }}"
      mode: '0755'
    when: >
      not yq_exist.stat.exists

  - name: Install azure cli (Debian)
    ansible.builtin.shell: "{{ srcDirectory }}/InstallAzureCLIDeb.sh"
    when: >
      ansible_os_family == "Debian"
      and  (azcli_src is changed
      or az_version.rc == 2)

  - name: Install the application package (Debian)
    apt:
      name: "{{ debianPackages }}"
      update_cache: yes
    when: >
      ansible_os_family == "Debian"
